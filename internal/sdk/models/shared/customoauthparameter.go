// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeBody   Type = "body"
	TypeQuery  Type = "query"
	TypeHeader Type = "header"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "query":
		fallthrough
	case "header":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// CustomOAuthParameter - Custom key/value pair of either type body, query or header
type CustomOAuthParameter struct {
	Key   string `json:"key"`
	Type  Type   `json:"type"`
	Value string `json:"value"`
}

func (o *CustomOAuthParameter) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CustomOAuthParameter) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *CustomOAuthParameter) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}
