// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Body struct {
}

type Status string

const (
	StatusSucceeded Status = "succeeded"
	StatusFailed    Status = "failed"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type TriggerWebhookResp struct {
	Body       *Body   `json:"body,omitempty"`
	Code       *string `json:"code,omitempty"`
	EndDate    *string `json:"end_date,omitempty"`
	EventID    *string `json:"event_id,omitempty"`
	Message    *string `json:"message,omitempty"`
	StartDate  *string `json:"start_date,omitempty"`
	Status     *Status `json:"status,omitempty"`
	StatusCode *string `json:"status_code,omitempty"`
}

func (o *TriggerWebhookResp) GetBody() *Body {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *TriggerWebhookResp) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *TriggerWebhookResp) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *TriggerWebhookResp) GetEventID() *string {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *TriggerWebhookResp) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TriggerWebhookResp) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *TriggerWebhookResp) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TriggerWebhookResp) GetStatusCode() *string {
	if o == nil {
		return nil
	}
	return o.StatusCode
}
