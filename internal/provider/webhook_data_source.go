// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-webhook/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-webhook/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-webhook/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &WebhookDataSource{}
var _ datasource.DataSourceWithConfigure = &WebhookDataSource{}

func NewWebhookDataSource() datasource.DataSource {
	return &WebhookDataSource{}
}

// WebhookDataSource is the data source implementation.
type WebhookDataSource struct {
	client *sdk.SDK
}

// WebhookDataSourceModel describes the data model.
type WebhookDataSourceModel struct {
	Auth                 *tfTypes.Auth                 `tfsdk:"auth"`
	CreationTime         types.String                  `tfsdk:"creation_time"`
	EnableStaticIP       types.Bool                    `tfsdk:"enable_static_ip"`
	Enabled              types.Bool                    `tfsdk:"enabled"`
	EventName            types.String                  `tfsdk:"event_name"`
	Filter               *tfTypes.Filter               `tfsdk:"filter"`
	HTTPMethod           types.String                  `tfsdk:"http_method"`
	ID                   types.String                  `tfsdk:"id"`
	JsonataExpression    types.String                  `tfsdk:"jsonata_expression"`
	Manifest             []types.String                `tfsdk:"manifest"`
	Name                 types.String                  `tfsdk:"name"`
	PayloadConfiguration *tfTypes.PayloadConfiguration `tfsdk:"payload_configuration"`
	Status               types.String                  `tfsdk:"status"`
	URL                  types.String                  `tfsdk:"url"`
}

// Metadata returns the data source type name.
func (r *WebhookDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_webhook"
}

// Schema defines the schema for the data source.
func (r *WebhookDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Webhook DataSource",

		Attributes: map[string]schema.Attribute{
			"auth": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"api_key_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"key_name": schema.StringAttribute{
								Computed: true,
							},
							"key_value": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `To be sent only if authType is API_KEY`,
					},
					"auth_type": schema.StringAttribute{
						Computed: true,
					},
					"basic_auth_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"password": schema.StringAttribute{
								Computed: true,
							},
							"username": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `To be sent only if authType is BASIC`,
					},
					"oauth_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"client_id": schema.StringAttribute{
								Computed: true,
							},
							"client_secret": schema.StringAttribute{
								Computed: true,
							},
							"custom_parameter_list": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"key": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"endpoint": schema.StringAttribute{
								Computed:    true,
								Description: `Https Endpoint for authentication`,
							},
							"http_method": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `To be sent only if authType is OAUTH_CLIENT_CREDENTIALS`,
					},
				},
			},
			"creation_time": schema.StringAttribute{
				Computed:    true,
				Description: `creation timestamp`,
			},
			"enable_static_ip": schema.BoolAttribute{
				Computed: true,
			},
			"enabled": schema.BoolAttribute{
				Computed: true,
			},
			"event_name": schema.StringAttribute{
				Computed: true,
			},
			"filter": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"key_to_filter": schema.StringAttribute{
						Computed: true,
					},
					"supported_values": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"http_method": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"jsonata_expression": schema.StringAttribute{
				Computed:    true,
				Description: `JSONata expression to transform the payload`,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the entity`,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"payload_configuration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"custom_headers": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `Object representing custom headers as key-value pairs.`,
					},
					"hydrate_entity": schema.BoolAttribute{
						Computed: true,
					},
					"include_activity": schema.BoolAttribute{
						Computed: true,
					},
					"include_changed_attributes": schema.BoolAttribute{
						Computed: true,
					},
					"include_relations": schema.BoolAttribute{
						Computed: true,
					},
				},
				Description: `Configuration for the webhook payload`,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"url": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *WebhookDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *WebhookDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *WebhookDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var configID string
	configID = data.ID.ValueString()

	request := operations.GetConfigRequest{
		ConfigID: configID,
	}
	res, err := r.client.Webhooks.GetConfig(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.WebhookConfig != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedWebhookConfig(res.WebhookConfig)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
