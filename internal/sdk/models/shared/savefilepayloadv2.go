// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-webhook/internal/sdk/internal/utils"
)

type SaveFilePayloadV2AccessControl string

const (
	SaveFilePayloadV2AccessControlPrivate    SaveFilePayloadV2AccessControl = "private"
	SaveFilePayloadV2AccessControlPublicRead SaveFilePayloadV2AccessControl = "public-read"
)

func (e SaveFilePayloadV2AccessControl) ToPointer() *SaveFilePayloadV2AccessControl {
	return &e
}
func (e *SaveFilePayloadV2AccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public-read":
		*e = SaveFilePayloadV2AccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveFilePayloadV2AccessControl: %v", v)
	}
}

type SaveFilePayloadV2 struct {
	// Additional fields that are not part of the schema
	Additional map[string]any `json:"__additional,omitempty"`
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL           *BaseEntityACL                  `json:"_acl,omitempty"`
	ID            *string                         `json:"_id,omitempty"`
	Purpose       []string                        `json:"_purpose,omitempty"`
	Tags          []string                        `json:"_tags,omitempty"`
	Title         *string                         `json:"_title,omitempty"`
	AccessControl *SaveFilePayloadV2AccessControl `default:"private" json:"access_control"`
	// Custom external download url used for the file
	CustomDownloadURL *string `json:"custom_download_url,omitempty"`
	Filename          *string `json:"filename,omitempty"`
	// MIME type of the file
	MimeType *string `json:"mime_type,omitempty"`
	S3ref    *S3Ref  `json:"s3ref,omitempty"`
	// Source URL for the file. Included if the entity was created from source_url, or when ?source_url=true
	SourceURL *string   `json:"source_url,omitempty"`
	Type      *FileType `json:"type,omitempty"`
}

func (s SaveFilePayloadV2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaveFilePayloadV2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SaveFilePayloadV2) GetAdditional() map[string]any {
	if o == nil {
		return nil
	}
	return o.Additional
}

func (o *SaveFilePayloadV2) GetACL() *BaseEntityACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *SaveFilePayloadV2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SaveFilePayloadV2) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *SaveFilePayloadV2) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SaveFilePayloadV2) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *SaveFilePayloadV2) GetAccessControl() *SaveFilePayloadV2AccessControl {
	if o == nil {
		return nil
	}
	return o.AccessControl
}

func (o *SaveFilePayloadV2) GetCustomDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.CustomDownloadURL
}

func (o *SaveFilePayloadV2) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *SaveFilePayloadV2) GetMimeType() *string {
	if o == nil {
		return nil
	}
	return o.MimeType
}

func (o *SaveFilePayloadV2) GetS3ref() *S3Ref {
	if o == nil {
		return nil
	}
	return o.S3ref
}

func (o *SaveFilePayloadV2) GetSourceURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceURL
}

func (o *SaveFilePayloadV2) GetType() *FileType {
	if o == nil {
		return nil
	}
	return o.Type
}
