// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-webhook/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-webhook/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *WebhookDataSourceModel) RefreshFromSharedWebhookConfig(resp *shared.WebhookConfig) {
	if resp != nil {
		r.Manifest = []types.String{}
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		if resp.Auth == nil {
			r.Auth = nil
		} else {
			r.Auth = &tfTypes.Auth{}
			if resp.Auth.APIKeyConfig == nil {
				r.Auth.APIKeyConfig = nil
			} else {
				r.Auth.APIKeyConfig = &tfTypes.APIKeyConfig{}
				r.Auth.APIKeyConfig.KeyName = types.StringValue(resp.Auth.APIKeyConfig.KeyName)
				r.Auth.APIKeyConfig.KeyValue = types.StringPointerValue(resp.Auth.APIKeyConfig.KeyValue)
			}
			r.Auth.AuthType = types.StringValue(string(resp.Auth.AuthType))
			if resp.Auth.BasicAuthConfig == nil {
				r.Auth.BasicAuthConfig = nil
			} else {
				r.Auth.BasicAuthConfig = &tfTypes.BasicAuthConfig{}
				r.Auth.BasicAuthConfig.Password = types.StringPointerValue(resp.Auth.BasicAuthConfig.Password)
				r.Auth.BasicAuthConfig.Username = types.StringValue(resp.Auth.BasicAuthConfig.Username)
			}
			if resp.Auth.OauthConfig == nil {
				r.Auth.OauthConfig = nil
			} else {
				r.Auth.OauthConfig = &tfTypes.OAuthConfig{}
				r.Auth.OauthConfig.ClientID = types.StringValue(resp.Auth.OauthConfig.ClientID)
				r.Auth.OauthConfig.ClientSecret = types.StringPointerValue(resp.Auth.OauthConfig.ClientSecret)
				r.Auth.OauthConfig.CustomParameterList = []tfTypes.CustomOAuthParameter{}
				if len(r.Auth.OauthConfig.CustomParameterList) > len(resp.Auth.OauthConfig.CustomParameterList) {
					r.Auth.OauthConfig.CustomParameterList = r.Auth.OauthConfig.CustomParameterList[:len(resp.Auth.OauthConfig.CustomParameterList)]
				}
				for customParameterListCount, customParameterListItem := range resp.Auth.OauthConfig.CustomParameterList {
					var customParameterList1 tfTypes.CustomOAuthParameter
					customParameterList1.Key = types.StringValue(customParameterListItem.Key)
					customParameterList1.Type = types.StringValue(string(customParameterListItem.Type))
					customParameterList1.Value = types.StringValue(customParameterListItem.Value)
					if customParameterListCount+1 > len(r.Auth.OauthConfig.CustomParameterList) {
						r.Auth.OauthConfig.CustomParameterList = append(r.Auth.OauthConfig.CustomParameterList, customParameterList1)
					} else {
						r.Auth.OauthConfig.CustomParameterList[customParameterListCount].Key = customParameterList1.Key
						r.Auth.OauthConfig.CustomParameterList[customParameterListCount].Type = customParameterList1.Type
						r.Auth.OauthConfig.CustomParameterList[customParameterListCount].Value = customParameterList1.Value
					}
				}
				r.Auth.OauthConfig.Endpoint = types.StringValue(resp.Auth.OauthConfig.Endpoint)
				r.Auth.OauthConfig.HTTPMethod = types.StringValue(string(resp.Auth.OauthConfig.HTTPMethod))
			}
		}
		r.CreationTime = types.StringPointerValue(resp.CreationTime)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EnableStaticIP = types.BoolPointerValue(resp.EnableStaticIP)
		r.EventName = types.StringValue(resp.EventName)
		if resp.Filter == nil {
			r.Filter = nil
		} else {
			r.Filter = &tfTypes.Filter{}
			r.Filter.KeyToFilter = types.StringValue(resp.Filter.KeyToFilter)
			r.Filter.SupportedValues = []types.String{}
			for _, v := range resp.Filter.SupportedValues {
				r.Filter.SupportedValues = append(r.Filter.SupportedValues, types.StringValue(v))
			}
		}
		if resp.HTTPMethod != nil {
			r.HTTPMethod = types.StringValue(string(*resp.HTTPMethod))
		} else {
			r.HTTPMethod = types.StringNull()
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.JsonataExpression = types.StringPointerValue(resp.JsonataExpression)
		r.Name = types.StringValue(resp.Name)
		if resp.PayloadConfiguration == nil {
			r.PayloadConfiguration = nil
		} else {
			r.PayloadConfiguration = &tfTypes.PayloadConfiguration{}
			if len(resp.PayloadConfiguration.CustomHeaders) > 0 {
				r.PayloadConfiguration.CustomHeaders = make(map[string]types.String)
				for key1, value1 := range resp.PayloadConfiguration.CustomHeaders {
					r.PayloadConfiguration.CustomHeaders[key1] = types.StringValue(value1)
				}
			}
			r.PayloadConfiguration.HydrateEntity = types.BoolPointerValue(resp.PayloadConfiguration.HydrateEntity)
			r.PayloadConfiguration.IncludeActivity = types.BoolPointerValue(resp.PayloadConfiguration.IncludeActivity)
			r.PayloadConfiguration.IncludeChangedAttributes = types.BoolPointerValue(resp.PayloadConfiguration.IncludeChangedAttributes)
			r.PayloadConfiguration.IncludeRelations = types.BoolPointerValue(resp.PayloadConfiguration.IncludeRelations)
		}
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
		r.URL = types.StringPointerValue(resp.URL)
	}
}
