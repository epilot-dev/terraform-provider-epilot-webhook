// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WebhookEventHTTPMethod string

const (
	WebhookEventHTTPMethodGet  WebhookEventHTTPMethod = "GET"
	WebhookEventHTTPMethodPost WebhookEventHTTPMethod = "POST"
	WebhookEventHTTPMethodPut  WebhookEventHTTPMethod = "PUT"
)

func (e WebhookEventHTTPMethod) ToPointer() *WebhookEventHTTPMethod {
	return &e
}
func (e *WebhookEventHTTPMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		*e = WebhookEventHTTPMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookEventHTTPMethod: %v", v)
	}
}

type WebhookEventBody struct {
}

type HTTPResponse struct {
	Body       *WebhookEventBody `json:"body,omitempty"`
	Code       *string           `json:"code,omitempty"`
	Message    *string           `json:"message,omitempty"`
	StatusCode *int64            `json:"status_code,omitempty"`
}

func (o *HTTPResponse) GetBody() *WebhookEventBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *HTTPResponse) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *HTTPResponse) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *HTTPResponse) GetStatusCode() *int64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

type WebhookEventStatus string

const (
	WebhookEventStatusSucceeded  WebhookEventStatus = "succeeded"
	WebhookEventStatusFailed     WebhookEventStatus = "failed"
	WebhookEventStatusInProgress WebhookEventStatus = "in_progress"
)

func (e WebhookEventStatus) ToPointer() *WebhookEventStatus {
	return &e
}
func (e *WebhookEventStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "in_progress":
		*e = WebhookEventStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookEventStatus: %v", v)
	}
}

type WebhookEvent struct {
	CreatedAt    *string                 `json:"created_at,omitempty"`
	EventID      string                  `json:"event_id"`
	EventName    *string                 `json:"event_name,omitempty"`
	HTTPMethod   *WebhookEventHTTPMethod `json:"http_method,omitempty"`
	HTTPResponse *HTTPResponse           `json:"http_response,omitempty"`
	// Contains the metadata about the configured event
	Metadata *Metadata `json:"metadata,omitempty"`
	OrgID    string    `json:"org_id"`
	// stringified payload of the webhook request
	Payload         *string             `json:"payload,omitempty"`
	Status          *WebhookEventStatus `json:"status,omitempty"`
	URL             *string             `json:"url,omitempty"`
	WebhookConfigID string              `json:"webhook_config_id"`
}

func (o *WebhookEvent) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *WebhookEvent) GetEventID() string {
	if o == nil {
		return ""
	}
	return o.EventID
}

func (o *WebhookEvent) GetEventName() *string {
	if o == nil {
		return nil
	}
	return o.EventName
}

func (o *WebhookEvent) GetHTTPMethod() *WebhookEventHTTPMethod {
	if o == nil {
		return nil
	}
	return o.HTTPMethod
}

func (o *WebhookEvent) GetHTTPResponse() *HTTPResponse {
	if o == nil {
		return nil
	}
	return o.HTTPResponse
}

func (o *WebhookEvent) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *WebhookEvent) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *WebhookEvent) GetPayload() *string {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *WebhookEvent) GetStatus() *WebhookEventStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *WebhookEvent) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *WebhookEvent) GetWebhookConfigID() string {
	if o == nil {
		return ""
	}
	return o.WebhookConfigID
}
