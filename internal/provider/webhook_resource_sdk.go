// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-webhook/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-webhook/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-webhook/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *WebhookResourceModel) ToSharedWebhookConfigInput(ctx context.Context) (*shared.WebhookConfigInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var auth *shared.Auth
	if r.Auth != nil {
		var apiKeyConfig *shared.APIKeyConfig
		if r.Auth.APIKeyConfig != nil {
			var keyName string
			keyName = r.Auth.APIKeyConfig.KeyName.ValueString()

			keyValue := new(string)
			if !r.Auth.APIKeyConfig.KeyValue.IsUnknown() && !r.Auth.APIKeyConfig.KeyValue.IsNull() {
				*keyValue = r.Auth.APIKeyConfig.KeyValue.ValueString()
			} else {
				keyValue = nil
			}
			apiKeyConfig = &shared.APIKeyConfig{
				KeyName:  keyName,
				KeyValue: keyValue,
			}
		}
		authType := shared.AuthType(r.Auth.AuthType.ValueString())
		var basicAuthConfig *shared.BasicAuthConfig
		if r.Auth.BasicAuthConfig != nil {
			password := new(string)
			if !r.Auth.BasicAuthConfig.Password.IsUnknown() && !r.Auth.BasicAuthConfig.Password.IsNull() {
				*password = r.Auth.BasicAuthConfig.Password.ValueString()
			} else {
				password = nil
			}
			var username string
			username = r.Auth.BasicAuthConfig.Username.ValueString()

			basicAuthConfig = &shared.BasicAuthConfig{
				Password: password,
				Username: username,
			}
		}
		var oauthConfig *shared.OAuthConfig
		if r.Auth.OauthConfig != nil {
			var clientID string
			clientID = r.Auth.OauthConfig.ClientID.ValueString()

			clientSecret := new(string)
			if !r.Auth.OauthConfig.ClientSecret.IsUnknown() && !r.Auth.OauthConfig.ClientSecret.IsNull() {
				*clientSecret = r.Auth.OauthConfig.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			customParameterList := make([]shared.CustomOAuthParameter, 0, len(r.Auth.OauthConfig.CustomParameterList))
			for _, customParameterListItem := range r.Auth.OauthConfig.CustomParameterList {
				var key string
				key = customParameterListItem.Key.ValueString()

				typeVar := shared.Type(customParameterListItem.Type.ValueString())
				var value string
				value = customParameterListItem.Value.ValueString()

				customParameterList = append(customParameterList, shared.CustomOAuthParameter{
					Key:   key,
					Type:  typeVar,
					Value: value,
				})
			}
			var endpoint string
			endpoint = r.Auth.OauthConfig.Endpoint.ValueString()

			httpMethod := shared.HTTPMethod(r.Auth.OauthConfig.HTTPMethod.ValueString())
			oauthConfig = &shared.OAuthConfig{
				ClientID:            clientID,
				ClientSecret:        clientSecret,
				CustomParameterList: customParameterList,
				Endpoint:            endpoint,
				HTTPMethod:          httpMethod,
			}
		}
		auth = &shared.Auth{
			APIKeyConfig:    apiKeyConfig,
			AuthType:        authType,
			BasicAuthConfig: basicAuthConfig,
			OauthConfig:     oauthConfig,
		}
	}
	creationTime := new(string)
	if !r.CreationTime.IsUnknown() && !r.CreationTime.IsNull() {
		*creationTime = r.CreationTime.ValueString()
	} else {
		creationTime = nil
	}
	enableStaticIP := new(bool)
	if !r.EnableStaticIP.IsUnknown() && !r.EnableStaticIP.IsNull() {
		*enableStaticIP = r.EnableStaticIP.ValueBool()
	} else {
		enableStaticIP = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var eventName string
	eventName = r.EventName.ValueString()

	var filter *shared.Filter
	if r.Filter != nil {
		var keyToFilter string
		keyToFilter = r.Filter.KeyToFilter.ValueString()

		supportedValues := make([]string, 0, len(r.Filter.SupportedValues))
		for _, supportedValuesItem := range r.Filter.SupportedValues {
			supportedValues = append(supportedValues, supportedValuesItem.ValueString())
		}
		filter = &shared.Filter{
			KeyToFilter:     keyToFilter,
			SupportedValues: supportedValues,
		}
	}
	httpMethod1 := new(shared.HTTPMethod)
	if !r.HTTPMethod.IsUnknown() && !r.HTTPMethod.IsNull() {
		*httpMethod1 = shared.HTTPMethod(r.HTTPMethod.ValueString())
	} else {
		httpMethod1 = nil
	}
	jsonataExpression := new(string)
	if !r.JsonataExpression.IsUnknown() && !r.JsonataExpression.IsNull() {
		*jsonataExpression = r.JsonataExpression.ValueString()
	} else {
		jsonataExpression = nil
	}
	var name string
	name = r.Name.ValueString()

	var payloadConfiguration *shared.PayloadConfiguration
	if r.PayloadConfiguration != nil {
		customHeaders := make(map[string]string)
		for customHeadersKey, customHeadersValue := range r.PayloadConfiguration.CustomHeaders {
			var customHeadersInst string
			customHeadersInst = customHeadersValue.ValueString()

			customHeaders[customHeadersKey] = customHeadersInst
		}
		hydrateEntity := new(bool)
		if !r.PayloadConfiguration.HydrateEntity.IsUnknown() && !r.PayloadConfiguration.HydrateEntity.IsNull() {
			*hydrateEntity = r.PayloadConfiguration.HydrateEntity.ValueBool()
		} else {
			hydrateEntity = nil
		}
		includeActivity := new(bool)
		if !r.PayloadConfiguration.IncludeActivity.IsUnknown() && !r.PayloadConfiguration.IncludeActivity.IsNull() {
			*includeActivity = r.PayloadConfiguration.IncludeActivity.ValueBool()
		} else {
			includeActivity = nil
		}
		includeChangedAttributes := new(bool)
		if !r.PayloadConfiguration.IncludeChangedAttributes.IsUnknown() && !r.PayloadConfiguration.IncludeChangedAttributes.IsNull() {
			*includeChangedAttributes = r.PayloadConfiguration.IncludeChangedAttributes.ValueBool()
		} else {
			includeChangedAttributes = nil
		}
		includeRelations := new(bool)
		if !r.PayloadConfiguration.IncludeRelations.IsUnknown() && !r.PayloadConfiguration.IncludeRelations.IsNull() {
			*includeRelations = r.PayloadConfiguration.IncludeRelations.ValueBool()
		} else {
			includeRelations = nil
		}
		payloadConfiguration = &shared.PayloadConfiguration{
			CustomHeaders:            customHeaders,
			HydrateEntity:            hydrateEntity,
			IncludeActivity:          includeActivity,
			IncludeChangedAttributes: includeChangedAttributes,
			IncludeRelations:         includeRelations,
		}
	}
	status := new(shared.WebhookConfigStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.WebhookConfigStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	url := new(string)
	if !r.URL.IsUnknown() && !r.URL.IsNull() {
		*url = r.URL.ValueString()
	} else {
		url = nil
	}
	out := shared.WebhookConfigInput{
		Manifest:             manifest,
		Auth:                 auth,
		CreationTime:         creationTime,
		EnableStaticIP:       enableStaticIP,
		Enabled:              enabled,
		EventName:            eventName,
		Filter:               filter,
		HTTPMethod:           httpMethod1,
		JsonataExpression:    jsonataExpression,
		Name:                 name,
		PayloadConfiguration: payloadConfiguration,
		Status:               status,
		URL:                  url,
	}

	return &out, diags
}

func (r *WebhookResourceModel) ToOperationsUpdateConfigRequest(ctx context.Context) (*operations.UpdateConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	webhookConfig, webhookConfigDiags := r.ToSharedWebhookConfigInput(ctx)
	diags.Append(webhookConfigDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var configID string
	configID = r.ID.ValueString()

	out := operations.UpdateConfigRequest{
		WebhookConfig: *webhookConfig,
		ConfigID:      configID,
	}

	return &out, diags
}

func (r *WebhookResourceModel) ToOperationsGetConfigRequest(ctx context.Context) (*operations.GetConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var configID string
	configID = r.ID.ValueString()

	out := operations.GetConfigRequest{
		ConfigID: configID,
	}

	return &out, diags
}

func (r *WebhookResourceModel) ToOperationsDeleteConfigRequest(ctx context.Context) (*operations.DeleteConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var configID string
	configID = r.ID.ValueString()

	out := operations.DeleteConfigRequest{
		ConfigID: configID,
	}

	return &out, diags
}

func (r *WebhookResourceModel) RefreshFromSharedWebhookConfig(ctx context.Context, resp *shared.WebhookConfig) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		if resp.Auth == nil {
			r.Auth = nil
		} else {
			r.Auth = &tfTypes.Auth{}
			if resp.Auth.APIKeyConfig == nil {
				r.Auth.APIKeyConfig = nil
			} else {
				r.Auth.APIKeyConfig = &tfTypes.APIKeyConfig{}
				r.Auth.APIKeyConfig.KeyName = types.StringValue(resp.Auth.APIKeyConfig.KeyName)
				r.Auth.APIKeyConfig.KeyValue = types.StringPointerValue(resp.Auth.APIKeyConfig.KeyValue)
			}
			r.Auth.AuthType = types.StringValue(string(resp.Auth.AuthType))
			if resp.Auth.BasicAuthConfig == nil {
				r.Auth.BasicAuthConfig = nil
			} else {
				r.Auth.BasicAuthConfig = &tfTypes.BasicAuthConfig{}
				r.Auth.BasicAuthConfig.Password = types.StringPointerValue(resp.Auth.BasicAuthConfig.Password)
				r.Auth.BasicAuthConfig.Username = types.StringValue(resp.Auth.BasicAuthConfig.Username)
			}
			if resp.Auth.OauthConfig == nil {
				r.Auth.OauthConfig = nil
			} else {
				r.Auth.OauthConfig = &tfTypes.OAuthConfig{}
				r.Auth.OauthConfig.ClientID = types.StringValue(resp.Auth.OauthConfig.ClientID)
				r.Auth.OauthConfig.ClientSecret = types.StringPointerValue(resp.Auth.OauthConfig.ClientSecret)
				r.Auth.OauthConfig.CustomParameterList = []tfTypes.CustomOAuthParameter{}
				if len(r.Auth.OauthConfig.CustomParameterList) > len(resp.Auth.OauthConfig.CustomParameterList) {
					r.Auth.OauthConfig.CustomParameterList = r.Auth.OauthConfig.CustomParameterList[:len(resp.Auth.OauthConfig.CustomParameterList)]
				}
				for customParameterListCount, customParameterListItem := range resp.Auth.OauthConfig.CustomParameterList {
					var customParameterList tfTypes.CustomOAuthParameter
					customParameterList.Key = types.StringValue(customParameterListItem.Key)
					customParameterList.Type = types.StringValue(string(customParameterListItem.Type))
					customParameterList.Value = types.StringValue(customParameterListItem.Value)
					if customParameterListCount+1 > len(r.Auth.OauthConfig.CustomParameterList) {
						r.Auth.OauthConfig.CustomParameterList = append(r.Auth.OauthConfig.CustomParameterList, customParameterList)
					} else {
						r.Auth.OauthConfig.CustomParameterList[customParameterListCount].Key = customParameterList.Key
						r.Auth.OauthConfig.CustomParameterList[customParameterListCount].Type = customParameterList.Type
						r.Auth.OauthConfig.CustomParameterList[customParameterListCount].Value = customParameterList.Value
					}
				}
				r.Auth.OauthConfig.Endpoint = types.StringValue(resp.Auth.OauthConfig.Endpoint)
				r.Auth.OauthConfig.HTTPMethod = types.StringValue(string(resp.Auth.OauthConfig.HTTPMethod))
			}
		}
		r.CreationTime = types.StringPointerValue(resp.CreationTime)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EnableStaticIP = types.BoolPointerValue(resp.EnableStaticIP)
		r.EventName = types.StringValue(resp.EventName)
		if resp.Filter == nil {
			r.Filter = nil
		} else {
			r.Filter = &tfTypes.Filter{}
			r.Filter.KeyToFilter = types.StringValue(resp.Filter.KeyToFilter)
			r.Filter.SupportedValues = make([]types.String, 0, len(resp.Filter.SupportedValues))
			for _, v := range resp.Filter.SupportedValues {
				r.Filter.SupportedValues = append(r.Filter.SupportedValues, types.StringValue(v))
			}
		}
		if resp.HTTPMethod != nil {
			r.HTTPMethod = types.StringValue(string(*resp.HTTPMethod))
		} else {
			r.HTTPMethod = types.StringNull()
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.JsonataExpression = types.StringPointerValue(resp.JsonataExpression)
		r.Name = types.StringValue(resp.Name)
		if resp.PayloadConfiguration == nil {
			r.PayloadConfiguration = nil
		} else {
			r.PayloadConfiguration = &tfTypes.PayloadConfiguration{}
			if len(resp.PayloadConfiguration.CustomHeaders) > 0 {
				r.PayloadConfiguration.CustomHeaders = make(map[string]types.String, len(resp.PayloadConfiguration.CustomHeaders))
				for key, value := range resp.PayloadConfiguration.CustomHeaders {
					r.PayloadConfiguration.CustomHeaders[key] = types.StringValue(value)
				}
			}
			r.PayloadConfiguration.HydrateEntity = types.BoolPointerValue(resp.PayloadConfiguration.HydrateEntity)
			r.PayloadConfiguration.IncludeActivity = types.BoolPointerValue(resp.PayloadConfiguration.IncludeActivity)
			r.PayloadConfiguration.IncludeChangedAttributes = types.BoolPointerValue(resp.PayloadConfiguration.IncludeChangedAttributes)
			r.PayloadConfiguration.IncludeRelations = types.BoolPointerValue(resp.PayloadConfiguration.IncludeRelations)
		}
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
		r.URL = types.StringPointerValue(resp.URL)
	}

	return diags
}
