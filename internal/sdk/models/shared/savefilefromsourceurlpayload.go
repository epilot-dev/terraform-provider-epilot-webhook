// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-webhook/internal/sdk/internal/utils"
)

type SaveFileFromSourceURLPayloadAccessControl string

const (
	SaveFileFromSourceURLPayloadAccessControlPrivate    SaveFileFromSourceURLPayloadAccessControl = "private"
	SaveFileFromSourceURLPayloadAccessControlPublicRead SaveFileFromSourceURLPayloadAccessControl = "public-read"
)

func (e SaveFileFromSourceURLPayloadAccessControl) ToPointer() *SaveFileFromSourceURLPayloadAccessControl {
	return &e
}
func (e *SaveFileFromSourceURLPayloadAccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public-read":
		*e = SaveFileFromSourceURLPayloadAccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveFileFromSourceURLPayloadAccessControl: %v", v)
	}
}

type SaveFileFromSourceURLPayload struct {
	AdditionalProperties any                                        `additionalProperties:"true" json:"-"`
	ID                   *string                                    `json:"_id,omitempty"`
	Purpose              []string                                   `json:"_purpose,omitempty"`
	Tags                 []string                                   `json:"_tags,omitempty"`
	AccessControl        *SaveFileFromSourceURLPayloadAccessControl `default:"private" json:"access_control"`
	// Custom external download url used for the file
	CustomDownloadURL *string `json:"custom_download_url,omitempty"`
	// Deprecated, use _id instead
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	FileEntityID *string `json:"file_entity_id,omitempty"`
	Filename     *string `json:"filename,omitempty"`
	// MIME type of the file
	MimeType *string `json:"mime_type,omitempty"`
	// List of entities to relate the file to
	Relations []FileRelationItem `json:"relations,omitempty"`
	// Custom external download url used for the file
	SourceURL *string   `json:"source_url,omitempty"`
	Type      *FileType `json:"type,omitempty"`
}

func (s SaveFileFromSourceURLPayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaveFileFromSourceURLPayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SaveFileFromSourceURLPayload) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SaveFileFromSourceURLPayload) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SaveFileFromSourceURLPayload) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *SaveFileFromSourceURLPayload) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SaveFileFromSourceURLPayload) GetAccessControl() *SaveFileFromSourceURLPayloadAccessControl {
	if o == nil {
		return nil
	}
	return o.AccessControl
}

func (o *SaveFileFromSourceURLPayload) GetCustomDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.CustomDownloadURL
}

func (o *SaveFileFromSourceURLPayload) GetFileEntityID() *string {
	if o == nil {
		return nil
	}
	return o.FileEntityID
}

func (o *SaveFileFromSourceURLPayload) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *SaveFileFromSourceURLPayload) GetMimeType() *string {
	if o == nil {
		return nil
	}
	return o.MimeType
}

func (o *SaveFileFromSourceURLPayload) GetRelations() []FileRelationItem {
	if o == nil {
		return nil
	}
	return o.Relations
}

func (o *SaveFileFromSourceURLPayload) GetSourceURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceURL
}

func (o *SaveFileFromSourceURLPayload) GetType() *FileType {
	if o == nil {
		return nil
	}
	return o.Type
}
