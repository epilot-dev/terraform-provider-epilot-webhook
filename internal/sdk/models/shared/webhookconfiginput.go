// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WebhookConfigStatus string

const (
	WebhookConfigStatusActive     WebhookConfigStatus = "active"
	WebhookConfigStatusInactive   WebhookConfigStatus = "inactive"
	WebhookConfigStatusIncomplete WebhookConfigStatus = "incomplete"
)

func (e WebhookConfigStatus) ToPointer() *WebhookConfigStatus {
	return &e
}
func (e *WebhookConfigStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		fallthrough
	case "incomplete":
		*e = WebhookConfigStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookConfigStatus: %v", v)
	}
}

type WebhookConfigInput struct {
	Auth *Auth `json:"auth,omitempty"`
	// creation timestamp
	CreationTime   *string     `json:"creationTime,omitempty"`
	EnableStaticIP *bool       `json:"enableStaticIP,omitempty"`
	Enabled        *bool       `json:"enabled,omitempty"`
	EventName      string      `json:"eventName"`
	Filter         *Filter     `json:"filter,omitempty"`
	HTTPMethod     *HTTPMethod `json:"httpMethod,omitempty"`
	Name           string      `json:"name"`
	// Configuration for the webhook payload
	PayloadConfiguration *PayloadConfiguration `json:"payloadConfiguration,omitempty"`
	Status               *WebhookConfigStatus  `json:"status,omitempty"`
	URL                  *string               `json:"url,omitempty"`
}

func (o *WebhookConfigInput) GetAuth() *Auth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *WebhookConfigInput) GetCreationTime() *string {
	if o == nil {
		return nil
	}
	return o.CreationTime
}

func (o *WebhookConfigInput) GetEnableStaticIP() *bool {
	if o == nil {
		return nil
	}
	return o.EnableStaticIP
}

func (o *WebhookConfigInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *WebhookConfigInput) GetEventName() string {
	if o == nil {
		return ""
	}
	return o.EventName
}

func (o *WebhookConfigInput) GetFilter() *Filter {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *WebhookConfigInput) GetHTTPMethod() *HTTPMethod {
	if o == nil {
		return nil
	}
	return o.HTTPMethod
}

func (o *WebhookConfigInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *WebhookConfigInput) GetPayloadConfiguration() *PayloadConfiguration {
	if o == nil {
		return nil
	}
	return o.PayloadConfiguration
}

func (o *WebhookConfigInput) GetStatus() *WebhookConfigStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *WebhookConfigInput) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type WebhookConfig struct {
	Auth *Auth `json:"auth,omitempty"`
	// creation timestamp
	CreationTime   *string     `json:"creationTime,omitempty"`
	EnableStaticIP *bool       `json:"enableStaticIP,omitempty"`
	Enabled        *bool       `json:"enabled,omitempty"`
	EventName      string      `json:"eventName"`
	Filter         *Filter     `json:"filter,omitempty"`
	HTTPMethod     *HTTPMethod `json:"httpMethod,omitempty"`
	ID             *string     `json:"id,omitempty"`
	Name           string      `json:"name"`
	// Configuration for the webhook payload
	PayloadConfiguration *PayloadConfiguration `json:"payloadConfiguration,omitempty"`
	Status               *WebhookConfigStatus  `json:"status,omitempty"`
	URL                  *string               `json:"url,omitempty"`
}

func (o *WebhookConfig) GetAuth() *Auth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *WebhookConfig) GetCreationTime() *string {
	if o == nil {
		return nil
	}
	return o.CreationTime
}

func (o *WebhookConfig) GetEnableStaticIP() *bool {
	if o == nil {
		return nil
	}
	return o.EnableStaticIP
}

func (o *WebhookConfig) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *WebhookConfig) GetEventName() string {
	if o == nil {
		return ""
	}
	return o.EventName
}

func (o *WebhookConfig) GetFilter() *Filter {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *WebhookConfig) GetHTTPMethod() *HTTPMethod {
	if o == nil {
		return nil
	}
	return o.HTTPMethod
}

func (o *WebhookConfig) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *WebhookConfig) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *WebhookConfig) GetPayloadConfiguration() *PayloadConfiguration {
	if o == nil {
		return nil
	}
	return o.PayloadConfiguration
}

func (o *WebhookConfig) GetStatus() *WebhookConfigStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *WebhookConfig) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
